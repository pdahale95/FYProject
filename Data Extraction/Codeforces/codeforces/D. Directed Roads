(iCodeforcesProblem
CodeforcesProblem
p0
(dp1
S'desription'
p2
VD. Directed Roads\u000atime limit per test2 seconds\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aZS the Coder and Chris the Baboon has explored Udayland for quite some time. They realize that it consists of n towns numbered from 1 to n.\u000aThere are n directed roads in the Udayland. i-th of them goes from town i to some other town ai (ai\u2009\u2260\u2009i). ZS the Coder can flip the direction of any road in Udayland, i.e. if it goes from town A to town B before the flip, it will go from town B to town A after.\u000aZS the Coder considers the roads in the Udayland confusing, if there is a sequence of distinct towns A1,\u2009A2,\u2009...,\u2009Ak (k\u2009>\u20091) such that for every 1\u2009\u2264\u2009i\u2009<\u2009k there is a road from town Ai to town Ai\u2009+\u20091 and another road from town Ak to town A1. In other words, the roads are confusing if some of them form a directed cycle of some towns.\u000aNow ZS the Coder wonders how many sets of roads (there are 2n variants) in initial configuration can he choose to flip such that after flipping each road in the set exactly once, the resulting network will not be confusing.\u000aNote that it is allowed that after the flipping there are more than one directed road from some town and possibly some towns with no roads leading out of it, or multiple roads between any pair of cities.\u000aInput\u000aThe first line of the input contains single integer n (2\u2009\u2264\u2009n\u2009\u2264\u20092·105) \u2014 the number of towns in Udayland.\u000aThe next line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009n,\u2009ai\u2009\u2260\u2009i), ai denotes a road going from town i to town ai.\u000aOutput\u000aPrint a single integer \u2014 the number of ways to flip some set of the roads so that the resulting whole set of all roads is not confusing. Since this number may be too large, print the answer modulo 109\u2009+\u20097.\u000aExamples\u000ainput\u000a3\u000a2 3 1\u000aoutput\u000a6\u000ainput\u000a4\u000a2 1 1 1\u000aoutput\u000a8\u000ainput\u000a5\u000a2 4 2 5 3\u000aoutput\u000a28\u000aNote\u000aConsider the first sample case. There are 3 towns and 3 roads. The towns are numbered from 1 to 3 and the roads are , , initially. Number the roads 1 to 3 in this order.\u000aThe sets of roads that ZS the Coder can flip (to make them not confusing) are {1},\u2009{2},\u2009{3},\u2009{1,\u20092},\u2009{1,\u20093},\u2009{2,\u20093}. Note that the empty set is invalid because if no roads are flipped, then towns 1,\u20092,\u20093 is form a directed cycle, so it is confusing. Similarly, flipping all roads is confusing too. Thus, there are a total of 6 possible sets ZS the Coder can flip.\u000aThe sample image shows all possible ways of orienting the roads from the first sample such that the network is not confusing.
p3
sS'problemStatement'
p4
VD. Directed Roads\u000atime limit per test2 seconds\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aZS the Coder and Chris the Baboon has explored Udayland for quite some time. They realize that it consists of n towns numbered from 1 to n.\u000aThere are n directed roads in the Udayland. i-th of them goes from town i to some other town ai (ai\u2009\u2260\u2009i). ZS the Coder can flip the direction of any road in Udayland, i.e. if it goes from town A to town B before the flip, it will go from town B to town A after.\u000aZS the Coder considers the roads in the Udayland confusing, if there is a sequence of distinct towns A1,\u2009A2,\u2009...,\u2009Ak (k\u2009>\u20091) such that for every 1\u2009\u2264\u2009i\u2009<\u2009k there is a road from town Ai to town Ai\u2009+\u20091 and another road from town Ak to town A1. In other words, the roads are confusing if some of them form a directed cycle of some towns.\u000aNow ZS the Coder wonders how many sets of roads (there are 2n variants) in initial configuration can he choose to flip such that after flipping each road in the set exactly once, the resulting network will not be confusing.\u000aNote that it is allowed that after the flipping there are more than one directed road from some town and possibly some towns with no roads leading out of it, or multiple roads between any pair of cities.\u000aInput\u000aThe first line of the input contains single integer n (2\u2009\u2264\u2009n\u2009\u2264\u20092·105) \u2014 the number of towns in Udayland.\u000aThe next line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009n,\u2009ai\u2009\u2260\u2009i), ai denotes a road going from town i to town ai.\u000aOutput\u000aPrint a single integer \u2014 the number of ways to flip some set of the roads so that the resulting whole set of all roads is not confusing. Since this number may be too large, print the answer modulo 109\u2009+\u20097.\u000aExamples\u000ainput\u000a3\u000a2 3 1\u000aoutput\u000a6\u000ainput\u000a4\u000a2 1 1 1\u000aoutput\u000a8\u000ainput\u000a5\u000a2 4 2 5 3\u000aoutput\u000a28\u000aNote\u000aConsider the first sample case. There are 3 towns and 3 roads. The towns are numbered from 1 to 3 and the roads are , , initially. Number the roads 1 to 3 in this order.\u000aThe sets of roads that ZS the Coder can flip (to make them not confusing) are {1},\u2009{2},\u2009{3},\u2009{1,\u20092},\u2009{1,\u20093},\u2009{2,\u20093}. Note that the empty set is invalid because if no roads are flipped, then towns 1,\u20092,\u20093 is form a directed cycle, so it is confusing. Similarly, flipping all roads is confusing too. Thus, there are a total of 6 possible sets ZS the Coder can flip.\u000aThe sample image shows all possible ways of orienting the roads from the first sample such that the network is not confusing.
p5
sS'name'
p6
VD. Directed Roads
p7
sS'tags'
p8
Vcombinatorics dfs and similar graphs math 
p9
sS'url'
p10
Vhttp://codeforces.com/problemset/problem/711/D
p11
sS'memorylimit'
p12
V256 megabytes
p13
sS'timelimit'
p14
V2 seconds
p15
sS'problemId'
p16
V711/D
p17
sS'id'
p18
c__builtin__
id
p19
sb.