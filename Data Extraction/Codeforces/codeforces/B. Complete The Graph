(iCodeforcesProblem
CodeforcesProblem
p0
(dp1
S'desription'
p2
VB. Complete The Graph\u000atime limit per test4 seconds\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aZS the Coder has drawn an undirected graph of n vertices numbered from 0 to n\u2009-\u20091 and m edges between them. Each edge of the graph is weighted, each weight is a positive integer.\u000aThe next day, ZS the Coder realized that some of the weights were erased! So he wants to reassign positive integer weight to each of the edges which weights were erased, so that the length of the shortest path between vertices s and t in the resulting graph is exactly L. Can you help him?\u000aInput\u000aThe first line contains five integers n,\u2009m,\u2009L,\u2009s,\u2009t (2\u2009\u2264\u2009n\u2009\u2264\u20091000,\u2009\u20091\u2009\u2264\u2009m\u2009\u2264\u200910\u2009000,\u2009\u20091\u2009\u2264\u2009L\u2009\u2264\u2009109,\u2009\u20090\u2009\u2264\u2009s,\u2009t\u2009\u2264\u2009n\u2009-\u20091,\u2009\u2009s\u2009\u2260\u2009t) \u2014 the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively.\u000aThen, m lines describing the edges of the graph follow. i-th of them contains three integers, ui,\u2009vi,\u2009wi (0\u2009\u2264\u2009ui,\u2009vi\u2009\u2264\u2009n\u2009-\u20091,\u2009\u2009ui\u2009\u2260\u2009vi,\u2009\u20090\u2009\u2264\u2009wi\u2009\u2264\u2009109). ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased.\u000aIt is guaranteed that there is at most one edge between any pair of vertices.\u000aOutput\u000aPrint "NO" (without quotes) in the only line if it's not possible to assign the weights in a required way.\u000aOtherwise, print "YES" in the first line. Next m lines should contain the edges of the resulting graph, with weights assigned to edges which weights were erased. i-th of them should contain three integers ui, vi and wi, denoting an edge between vertices ui and vi of weight wi. The edges of the new graph must coincide with the ones in the graph from the input. The weights that were not erased must remain unchanged whereas the new weights can be any positive integer not exceeding 1018.\u000aThe order of the edges in the output doesn't matter. The length of the shortest path between s and t must be equal to L.\u000aIf there are multiple solutions, print any of them.\u000aExamples\u000ainput\u000a5 5 13 0 4\u000a0 1 5\u000a2 1 2\u000a3 2 3\u000a1 4 0\u000a4 3 4\u000aoutput\u000aYES\u000a0 1 5\u000a2 1 2\u000a3 2 3\u000a1 4 8\u000a4 3 4\u000ainput\u000a2 1 123456789 0 1\u000a0 1 0\u000aoutput\u000aYES\u000a0 1 123456789\u000ainput\u000a2 1 999999999 1 0\u000a0 1 1000000000\u000aoutput\u000aNO\u000aNote\u000aHere's how the graph in the first sample case looks like :\u000aIn the first sample case, there is only one missing edge weight. Placing the weight of 8 gives a shortest path from 0 to 4 of length 13.\u000aIn the second sample case, there is only a single edge. Clearly, the only way is to replace the missing weight with 123456789.\u000aIn the last sample case, there is no weights to assign but the length of the shortest path doesn't match the required value, so the answer is "NO".
p3
sS'problemStatement'
p4
VB. Complete The Graph\u000atime limit per test4 seconds\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aZS the Coder has drawn an undirected graph of n vertices numbered from 0 to n\u2009-\u20091 and m edges between them. Each edge of the graph is weighted, each weight is a positive integer.\u000aThe next day, ZS the Coder realized that some of the weights were erased! So he wants to reassign positive integer weight to each of the edges which weights were erased, so that the length of the shortest path between vertices s and t in the resulting graph is exactly L. Can you help him?\u000aInput\u000aThe first line contains five integers n,\u2009m,\u2009L,\u2009s,\u2009t (2\u2009\u2264\u2009n\u2009\u2264\u20091000,\u2009\u20091\u2009\u2264\u2009m\u2009\u2264\u200910\u2009000,\u2009\u20091\u2009\u2264\u2009L\u2009\u2264\u2009109,\u2009\u20090\u2009\u2264\u2009s,\u2009t\u2009\u2264\u2009n\u2009-\u20091,\u2009\u2009s\u2009\u2260\u2009t) \u2014 the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively.\u000aThen, m lines describing the edges of the graph follow. i-th of them contains three integers, ui,\u2009vi,\u2009wi (0\u2009\u2264\u2009ui,\u2009vi\u2009\u2264\u2009n\u2009-\u20091,\u2009\u2009ui\u2009\u2260\u2009vi,\u2009\u20090\u2009\u2264\u2009wi\u2009\u2264\u2009109). ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased.\u000aIt is guaranteed that there is at most one edge between any pair of vertices.\u000aOutput\u000aPrint "NO" (without quotes) in the only line if it's not possible to assign the weights in a required way.\u000aOtherwise, print "YES" in the first line. Next m lines should contain the edges of the resulting graph, with weights assigned to edges which weights were erased. i-th of them should contain three integers ui, vi and wi, denoting an edge between vertices ui and vi of weight wi. The edges of the new graph must coincide with the ones in the graph from the input. The weights that were not erased must remain unchanged whereas the new weights can be any positive integer not exceeding 1018.\u000aThe order of the edges in the output doesn't matter. The length of the shortest path between s and t must be equal to L.\u000aIf there are multiple solutions, print any of them.\u000aExamples\u000ainput\u000a5 5 13 0 4\u000a0 1 5\u000a2 1 2\u000a3 2 3\u000a1 4 0\u000a4 3 4\u000aoutput\u000aYES\u000a0 1 5\u000a2 1 2\u000a3 2 3\u000a1 4 8\u000a4 3 4\u000ainput\u000a2 1 123456789 0 1\u000a0 1 0\u000aoutput\u000aYES\u000a0 1 123456789\u000ainput\u000a2 1 999999999 1 0\u000a0 1 1000000000\u000aoutput\u000aNO\u000aNote\u000aHere's how the graph in the first sample case looks like :\u000aIn the first sample case, there is only one missing edge weight. Placing the weight of 8 gives a shortest path from 0 to 4 of length 13.\u000aIn the second sample case, there is only a single edge. Clearly, the only way is to replace the missing weight with 123456789.\u000aIn the last sample case, there is no weights to assign but the length of the shortest path doesn't match the required value, so the answer is "NO".
p5
sS'name'
p6
VB. Complete The Graph
p7
sS'tags'
p8
Vbinary search constructive algorithms graphs shortest paths 
p9
sS'url'
p10
Vhttp://codeforces.com/problemset/problem/715/B
p11
sS'memorylimit'
p12
V256 megabytes
p13
sS'timelimit'
p14
V4 seconds
p15
sS'problemId'
p16
V715/B
p17
sS'id'
p18
c__builtin__
id
p19
sb.