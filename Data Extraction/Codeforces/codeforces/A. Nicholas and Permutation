(iCodeforcesProblem
CodeforcesProblem
p0
(dp1
S'desription'
p2
VA. Nicholas and Permutation\u000atime limit per test1 second\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aNicholas has an array a that contains n distinct integers from 1 to n. In other words, Nicholas has a permutation of size n.\u000aNicholas want the minimum element (integer 1) and the maximum element (integer n) to be as far as possible from each other. He wants to perform exactly one swap in order to maximize the distance between the minimum and the maximum elements. The distance between two elements is considered to be equal to the absolute difference between their positions.\u000aInput\u000aThe first line of the input contains a single integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the size of the permutation.\u000aThe second line of the input contains n distinct integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009n), where ai is equal to the element at the i-th position.\u000aOutput\u000aPrint a single integer \u2014 the maximum possible distance between the minimum and the maximum elements Nicholas can achieve by performing exactly one swap.\u000aExamples\u000ainput\u000a5\u000a4 5 1 3 2\u000aoutput\u000a3\u000ainput\u000a7\u000a1 6 5 3 4 7 2\u000aoutput\u000a6\u000ainput\u000a6\u000a6 5 4 3 2 1\u000aoutput\u000a5\u000aNote\u000aIn the first sample, one may obtain the optimal answer by swapping elements 1 and 2.\u000aIn the second sample, the minimum and the maximum elements will be located in the opposite ends of the array if we swap 7 and 2.\u000aIn the third sample, the distance between the minimum and the maximum elements is already maximum possible, so we just perform some unnecessary swap, for example, one can swap 5 and 2.
p3
sS'problemStatement'
p4
VA. Nicholas and Permutation\u000atime limit per test1 second\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aNicholas has an array a that contains n distinct integers from 1 to n. In other words, Nicholas has a permutation of size n.\u000aNicholas want the minimum element (integer 1) and the maximum element (integer n) to be as far as possible from each other. He wants to perform exactly one swap in order to maximize the distance between the minimum and the maximum elements. The distance between two elements is considered to be equal to the absolute difference between their positions.\u000aInput\u000aThe first line of the input contains a single integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the size of the permutation.\u000aThe second line of the input contains n distinct integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009n), where ai is equal to the element at the i-th position.\u000aOutput\u000aPrint a single integer \u2014 the maximum possible distance between the minimum and the maximum elements Nicholas can achieve by performing exactly one swap.\u000aExamples\u000ainput\u000a5\u000a4 5 1 3 2\u000aoutput\u000a3\u000ainput\u000a7\u000a1 6 5 3 4 7 2\u000aoutput\u000a6\u000ainput\u000a6\u000a6 5 4 3 2 1\u000aoutput\u000a5\u000aNote\u000aIn the first sample, one may obtain the optimal answer by swapping elements 1 and 2.\u000aIn the second sample, the minimum and the maximum elements will be located in the opposite ends of the array if we swap 7 and 2.\u000aIn the third sample, the distance between the minimum and the maximum elements is already maximum possible, so we just perform some unnecessary swap, for example, one can swap 5 and 2.
p5
sS'name'
p6
VA. Nicholas and Permutation
p7
sS'tags'
p8
Vimplementation 
p9
sS'url'
p10
Vhttp://codeforces.com/problemset/problem/676/A
p11
sS'memorylimit'
p12
V256 megabytes
p13
sS'timelimit'
p14
V1 second
p15
sS'problemId'
p16
V676/A
p17
sS'id'
p18
c__builtin__
id
p19
sb.