(iCodeforcesProblem
CodeforcesProblem
p0
(dp1
S'desription'
p2
VA. Plus and Square Root\u000atime limit per test2 seconds\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aZS the Coder is playing a game. There is a number displayed on the screen and there are two buttons, '\u2009+\u2009' (plus) and '' (square root). Initially, the number 2 is displayed on the screen. There are n\u2009+\u20091 levels in the game and ZS the Coder start at the level 1.\u000aWhen ZS the Coder is at level k, he can :\u000aPress the '\u2009+\u2009' button. This increases the number on the screen by exactly k. So, if the number on the screen was x, it becomes x\u2009+\u2009k.\u000aPress the '' button. Let the number on the screen be x. After pressing this button, the number becomes . After that, ZS the Coder levels up, so his current level becomes k\u2009+\u20091. This button can only be pressed when x is a perfect square, i.e. x\u2009=\u2009m2 for some positive integer m.\u000aAdditionally, after each move, if ZS the Coder is at level k, and the number on the screen is m, then m must be a multiple of k. Note that this condition is only checked after performing the press. For example, if ZS the Coder is at level 4 and current number is 100, he presses the '' button and the number turns into 10. Note that at this moment, 10 is not divisible by 4, but this press is still valid, because after it, ZS the Coder is at level 5, and 10 is divisible by 5.\u000aZS the Coder needs your help in beating the game \u2014 he wants to reach level n\u2009+\u20091. In other words, he needs to press the '' button n times. Help him determine the number of times he should press the '\u2009+\u2009' button before pressing the '' button at each level.\u000aPlease note that ZS the Coder wants to find just any sequence of presses allowing him to reach level n\u2009+\u20091, but not necessarily a sequence minimizing the number of presses.\u000aInput\u000aThe first and only line of the input contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100\u2009000), denoting that ZS the Coder wants to reach level n\u2009+\u20091.\u000aOutput\u000aPrint n non-negative integers, one per line. i-th of them should be equal to the number of times that ZS the Coder needs to press the '\u2009+\u2009' button before pressing the '' button at level i.\u000aEach number in the output should not exceed 1018. However, the number on the screen can be greater than 1018.\u000aIt is guaranteed that at least one solution exists. If there are multiple solutions, print any of them.\u000aExamples\u000ainput\u000a3\u000aoutput\u000a14\u000a16\u000a46\u000ainput\u000a2\u000aoutput\u000a999999999999999998\u000a44500000000\u000ainput\u000a4\u000aoutput\u000a2\u000a17\u000a46\u000a97\u000aNote\u000aIn the first sample case:\u000aOn the first level, ZS the Coder pressed the '\u2009+\u2009' button 14 times (and the number on screen is initially 2), so the number became 2\u2009+\u200914·1\u2009=\u200916. Then, ZS the Coder pressed the '' button, and the number became .\u000aAfter that, on the second level, ZS pressed the '\u2009+\u2009' button 16 times, so the number becomes 4\u2009+\u200916·2\u2009=\u200936. Then, ZS pressed the '' button, levelling up and changing the number into .\u000aAfter that, on the third level, ZS pressed the '\u2009+\u2009' button 46 times, so the number becomes 6\u2009+\u200946·3\u2009=\u2009144. Then, ZS pressed the '' button, levelling up and changing the number into .\u000aNote that 12 is indeed divisible by 4, so ZS the Coder can reach level 4.\u000aAlso, note that pressing the '\u2009+\u2009' button 10 times on the third level before levelling up does not work, because the number becomes 6\u2009+\u200910·3\u2009=\u200936, and when the '' button is pressed, the number becomes and ZS the Coder is at Level 4. However, 6 is not divisible by 4 now, so this is not a valid solution.\u000aIn the second sample case:\u000aOn the first level, ZS the Coder pressed the '\u2009+\u2009' button 999999999999999998 times (and the number on screen is initially 2), so the number became 2\u2009+\u2009999999999999999998·1\u2009=\u20091018. Then, ZS the Coder pressed the '' button, and the number became .\u000aAfter that, on the second level, ZS pressed the '\u2009+\u2009' button 44500000000 times, so the number becomes 109\u2009+\u200944500000000·2\u2009=\u20099·1010. Then, ZS pressed the '' button, levelling up and changing the number into .\u000aNote that 300000 is a multiple of 3, so ZS the Coder can reach level 3.
p3
sS'problemStatement'
p4
VA. Plus and Square Root\u000atime limit per test2 seconds\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aZS the Coder is playing a game. There is a number displayed on the screen and there are two buttons, '\u2009+\u2009' (plus) and '' (square root). Initially, the number 2 is displayed on the screen. There are n\u2009+\u20091 levels in the game and ZS the Coder start at the level 1.\u000aWhen ZS the Coder is at level k, he can :\u000aPress the '\u2009+\u2009' button. This increases the number on the screen by exactly k. So, if the number on the screen was x, it becomes x\u2009+\u2009k.\u000aPress the '' button. Let the number on the screen be x. After pressing this button, the number becomes . After that, ZS the Coder levels up, so his current level becomes k\u2009+\u20091. This button can only be pressed when x is a perfect square, i.e. x\u2009=\u2009m2 for some positive integer m.\u000aAdditionally, after each move, if ZS the Coder is at level k, and the number on the screen is m, then m must be a multiple of k. Note that this condition is only checked after performing the press. For example, if ZS the Coder is at level 4 and current number is 100, he presses the '' button and the number turns into 10. Note that at this moment, 10 is not divisible by 4, but this press is still valid, because after it, ZS the Coder is at level 5, and 10 is divisible by 5.\u000aZS the Coder needs your help in beating the game \u2014 he wants to reach level n\u2009+\u20091. In other words, he needs to press the '' button n times. Help him determine the number of times he should press the '\u2009+\u2009' button before pressing the '' button at each level.\u000aPlease note that ZS the Coder wants to find just any sequence of presses allowing him to reach level n\u2009+\u20091, but not necessarily a sequence minimizing the number of presses.\u000aInput\u000aThe first and only line of the input contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100\u2009000), denoting that ZS the Coder wants to reach level n\u2009+\u20091.\u000aOutput\u000aPrint n non-negative integers, one per line. i-th of them should be equal to the number of times that ZS the Coder needs to press the '\u2009+\u2009' button before pressing the '' button at level i.\u000aEach number in the output should not exceed 1018. However, the number on the screen can be greater than 1018.\u000aIt is guaranteed that at least one solution exists. If there are multiple solutions, print any of them.\u000aExamples\u000ainput\u000a3\u000aoutput\u000a14\u000a16\u000a46\u000ainput\u000a2\u000aoutput\u000a999999999999999998\u000a44500000000\u000ainput\u000a4\u000aoutput\u000a2\u000a17\u000a46\u000a97\u000aNote\u000aIn the first sample case:\u000aOn the first level, ZS the Coder pressed the '\u2009+\u2009' button 14 times (and the number on screen is initially 2), so the number became 2\u2009+\u200914·1\u2009=\u200916. Then, ZS the Coder pressed the '' button, and the number became .\u000aAfter that, on the second level, ZS pressed the '\u2009+\u2009' button 16 times, so the number becomes 4\u2009+\u200916·2\u2009=\u200936. Then, ZS pressed the '' button, levelling up and changing the number into .\u000aAfter that, on the third level, ZS pressed the '\u2009+\u2009' button 46 times, so the number becomes 6\u2009+\u200946·3\u2009=\u2009144. Then, ZS pressed the '' button, levelling up and changing the number into .\u000aNote that 12 is indeed divisible by 4, so ZS the Coder can reach level 4.\u000aAlso, note that pressing the '\u2009+\u2009' button 10 times on the third level before levelling up does not work, because the number becomes 6\u2009+\u200910·3\u2009=\u200936, and when the '' button is pressed, the number becomes and ZS the Coder is at Level 4. However, 6 is not divisible by 4 now, so this is not a valid solution.\u000aIn the second sample case:\u000aOn the first level, ZS the Coder pressed the '\u2009+\u2009' button 999999999999999998 times (and the number on screen is initially 2), so the number became 2\u2009+\u2009999999999999999998·1\u2009=\u20091018. Then, ZS the Coder pressed the '' button, and the number became .\u000aAfter that, on the second level, ZS pressed the '\u2009+\u2009' button 44500000000 times, so the number becomes 109\u2009+\u200944500000000·2\u2009=\u20099·1010. Then, ZS pressed the '' button, levelling up and changing the number into .\u000aNote that 300000 is a multiple of 3, so ZS the Coder can reach level 3.
p5
sS'name'
p6
VA. Plus and Square Root
p7
sS'tags'
p8
Vconstructive algorithms math 
p9
sS'url'
p10
Vhttp://codeforces.com/problemset/problem/715/A
p11
sS'memorylimit'
p12
V256 megabytes
p13
sS'timelimit'
p14
V2 seconds
p15
sS'problemId'
p16
V715/A
p17
sS'id'
p18
c__builtin__
id
p19
sb.