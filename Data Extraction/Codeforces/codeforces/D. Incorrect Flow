(iCodeforcesProblem
CodeforcesProblem
p0
(dp1
S'desription'
p2
VD. Incorrect Flow\u000atime limit per test1 second\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aAt the entrance examination for the magistracy of the MSU Cyber-Mechanics Department Sasha got the question about Ford-Fulkerson algorithm. He knew the topic perfectly as he worked with it many times on programming competition. As the task for the question he was given a network with partially build flow that he had to use in order to demonstrate the workflow of the algorithm. He quickly finished to write the text and took a look at the problem only to understand that the given network is incorrect!\u000aSuppose you are given a directed graph G(V,\u2009E) with two special nodes s and t called source and sink. We denote as n the number of nodes in the graph, i.e. n\u2009=\u2009|V| and m stands for the number of directed edges in the graph, i.e. m\u2009=\u2009|E|. For the purpose of this problem we always consider node 1 to be the source and node n to be the sink. In addition, for each edge of the graph e we define the capacity function c(e) and flow function f(e). Function f(e) represents the correct flow if the following conditions are satisfied:\u000aFor each edge the flow is non-negative and does not exceed capacity c(e), i.e. 0\u2009\u2264\u2009f(e)\u2009\u2264\u2009c(e).\u000aFor each node , that is not source or sink (v\u2009\u2260\u2009s and v\u2009\u2260\u2009t) the sum of flows of all edges going in v is equal to the sum of the flows among all edges going out from v. In other words, there is no flow stuck in v.\u000aIt was clear that as the exam was prepared last night and there are plenty of mistakes in the tasks. Sasha asked one of the professors to fix the network or give the correct task, but the reply was that the magistrate student should be able to fix the network himself. As the professor doesn't want the task to become easier, he asks Sasha to fix the network in a such way that the total number of changes is minimum possible. Sasha is not allowed to remove edges, add new ones or reverse the direction of existing edges. The only thing he is able to do is to change capacity function c(e) and flow function f(e). Moreover, all the values should remain non-negative integers. There is no requirement on the flow to be maximum in any sense.\u000aFind the minimum possible total change of the functions f(e) and c(e) that Sasha has to make in order to make the flow correct. The total change is defined as the sum of absolute differences, i.e. if new functions are f\u2009*\u2009(e) and c\u2009*\u2009(e), then the total change is .\u000aInput\u000aThe first line of the input contains two integers n and m (2\u2009\u2264\u2009n\u2009\u2264\u2009100, 0\u2009\u2264\u2009m\u2009\u2264\u2009100) \u2014 the number of nodes and edges in the graph respectively. Each of the following m lines contains the description of the edges, consisting of four integers ui, vi, ci and fi (1\u2009\u2264\u2009ui,\u2009vi\u2009\u2264\u2009n, ui\u2009\u2260\u2009vi, 0\u2009\u2264\u2009ci,\u2009fi\u2009\u2264\u20091\u2009000\u2009000) \u2014 index of the node the edges starts from, the index of the node the edge goes to, current capacity and flow value.\u000aNode number 1 is the source, and node number n is the sink. It's guaranteed that no edge goes to the source, and no edges starts in the sink.\u000aGiven graph contains no self-loops but may contain multiple edges.\u000aOutput\u000aPrint one integer \u2014 the minimum total sum of changes that Sasha has to do in order to get the correct flow description.\u000aExamples\u000ainput\u000a2 1\u000a1 2 2 1\u000aoutput\u000a0\u000ainput\u000a2 1\u000a1 2 1 2\u000aoutput\u000a1\u000ainput\u000a3 3\u000a1 2 1 1\u000a2 3 2 2\u000a1 3 3 3\u000aoutput\u000a1\u000ainput\u000a4 2\u000a2 3 1 1\u000a3 2 1 1\u000aoutput\u000a0\u000aNote\u000aIn the first sample, the flow is initially correct. Note, that the flow is not maximum, but this is not required.\u000aIn the second sample, the flow value of the only edge is greater than its capacity. There are two ways to fix this: either increase the capacity up to 2 or reduce the flow down to 1.\u000aIn the third sample, there is only 1 unit of flow coming to vertex 2, but there are 2 units going out of it. One of the possible solutions is to reduce the value of the flow on the second edge by 1.\u000aIn the fourth sample, there is isolated circulation of flow, but this description is correct by definition.
p3
sS'problemStatement'
p4
VD. Incorrect Flow\u000atime limit per test1 second\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aAt the entrance examination for the magistracy of the MSU Cyber-Mechanics Department Sasha got the question about Ford-Fulkerson algorithm. He knew the topic perfectly as he worked with it many times on programming competition. As the task for the question he was given a network with partially build flow that he had to use in order to demonstrate the workflow of the algorithm. He quickly finished to write the text and took a look at the problem only to understand that the given network is incorrect!\u000aSuppose you are given a directed graph G(V,\u2009E) with two special nodes s and t called source and sink. We denote as n the number of nodes in the graph, i.e. n\u2009=\u2009|V| and m stands for the number of directed edges in the graph, i.e. m\u2009=\u2009|E|. For the purpose of this problem we always consider node 1 to be the source and node n to be the sink. In addition, for each edge of the graph e we define the capacity function c(e) and flow function f(e). Function f(e) represents the correct flow if the following conditions are satisfied:\u000aFor each edge the flow is non-negative and does not exceed capacity c(e), i.e. 0\u2009\u2264\u2009f(e)\u2009\u2264\u2009c(e).\u000aFor each node , that is not source or sink (v\u2009\u2260\u2009s and v\u2009\u2260\u2009t) the sum of flows of all edges going in v is equal to the sum of the flows among all edges going out from v. In other words, there is no flow stuck in v.\u000aIt was clear that as the exam was prepared last night and there are plenty of mistakes in the tasks. Sasha asked one of the professors to fix the network or give the correct task, but the reply was that the magistrate student should be able to fix the network himself. As the professor doesn't want the task to become easier, he asks Sasha to fix the network in a such way that the total number of changes is minimum possible. Sasha is not allowed to remove edges, add new ones or reverse the direction of existing edges. The only thing he is able to do is to change capacity function c(e) and flow function f(e). Moreover, all the values should remain non-negative integers. There is no requirement on the flow to be maximum in any sense.\u000aFind the minimum possible total change of the functions f(e) and c(e) that Sasha has to make in order to make the flow correct. The total change is defined as the sum of absolute differences, i.e. if new functions are f\u2009*\u2009(e) and c\u2009*\u2009(e), then the total change is .\u000aInput\u000aThe first line of the input contains two integers n and m (2\u2009\u2264\u2009n\u2009\u2264\u2009100, 0\u2009\u2264\u2009m\u2009\u2264\u2009100) \u2014 the number of nodes and edges in the graph respectively. Each of the following m lines contains the description of the edges, consisting of four integers ui, vi, ci and fi (1\u2009\u2264\u2009ui,\u2009vi\u2009\u2264\u2009n, ui\u2009\u2260\u2009vi, 0\u2009\u2264\u2009ci,\u2009fi\u2009\u2264\u20091\u2009000\u2009000) \u2014 index of the node the edges starts from, the index of the node the edge goes to, current capacity and flow value.\u000aNode number 1 is the source, and node number n is the sink. It's guaranteed that no edge goes to the source, and no edges starts in the sink.\u000aGiven graph contains no self-loops but may contain multiple edges.\u000aOutput\u000aPrint one integer \u2014 the minimum total sum of changes that Sasha has to do in order to get the correct flow description.\u000aExamples\u000ainput\u000a2 1\u000a1 2 2 1\u000aoutput\u000a0\u000ainput\u000a2 1\u000a1 2 1 2\u000aoutput\u000a1\u000ainput\u000a3 3\u000a1 2 1 1\u000a2 3 2 2\u000a1 3 3 3\u000aoutput\u000a1\u000ainput\u000a4 2\u000a2 3 1 1\u000a3 2 1 1\u000aoutput\u000a0\u000aNote\u000aIn the first sample, the flow is initially correct. Note, that the flow is not maximum, but this is not required.\u000aIn the second sample, the flow value of the only edge is greater than its capacity. There are two ways to fix this: either increase the capacity up to 2 or reduce the flow down to 1.\u000aIn the third sample, there is only 1 unit of flow coming to vertex 2, but there are 2 units going out of it. One of the possible solutions is to reduce the value of the flow on the second edge by 1.\u000aIn the fourth sample, there is isolated circulation of flow, but this description is correct by definition.
p5
sS'name'
p6
VD. Incorrect Flow
p7
sS'tags'
p8
Vflows 
p9
sS'url'
p10
Vhttp://codeforces.com/problemset/problem/708/D
p11
sS'memorylimit'
p12
V256 megabytes
p13
sS'timelimit'
p14
V1 second
p15
sS'problemId'
p16
V708/D
p17
sS'id'
p18
c__builtin__
id
p19
sb.