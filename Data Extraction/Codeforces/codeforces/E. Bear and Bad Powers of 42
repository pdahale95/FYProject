(iCodeforcesProblem
CodeforcesProblem
p0
(dp1
S'desription'
p2
VE. Bear and Bad Powers of 42\u000atime limit per test5 seconds\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aLimak, a bear, isn't good at handling queries. So, he asks you to do it.\u000aWe say that powers of 42 (numbers 1,\u200942,\u20091764,\u2009...) are bad. Other numbers are good.\u000aYou are given a sequence of n good integers t1,\u2009t2,\u2009...,\u2009tn. Your task is to handle q queries of three types:\u000a1 i \u2014 print ti in a separate line.\u000a2 a b x \u2014 for set ti to x. It's guaranteed that x is a good number.\u000a3 a b x \u2014 for increase ti by x. After this repeat the process while at least one ti is bad.\u000aYou can note that after each query all ti are good.\u000aInput\u000aThe first line of the input contains two integers n and q (1\u2009\u2264\u2009n,\u2009q\u2009\u2264\u2009100\u2009000) \u2014 the size of Limak's sequence and the number of queries, respectively.\u000aThe second line of the input contains n integers t1,\u2009t2,\u2009...,\u2009tn (2\u2009\u2264\u2009ti\u2009\u2264\u2009109) \u2014 initial elements of Limak's sequence. All ti are good.\u000aThen, q lines follow. The i-th of them describes the i-th query. The first number in the line is an integer typei (1\u2009\u2264\u2009typei\u2009\u2264\u20093) \u2014 the type of the query. There is at least one query of the first type, so the output won't be empty.\u000aIn queries of the second and the third type there is 1\u2009\u2264\u2009a\u2009\u2264\u2009b\u2009\u2264\u2009n.\u000aIn queries of the second type an integer x (2\u2009\u2264\u2009x\u2009\u2264\u2009109) is guaranteed to be good.\u000aIn queries of the third type an integer x (1\u2009\u2264\u2009x\u2009\u2264\u2009109) may be bad.\u000aOutput\u000aFor each query of the first type, print the answer in a separate line.\u000aExample\u000ainput\u000a6 12\u000a40 1700 7 1672 4 1722\u000a3 2 4 42\u000a1 2\u000a1 3\u000a3 2 6 50\u000a1 2\u000a1 4\u000a1 6\u000a2 3 4 41\u000a3 1 5 1\u000a1 1\u000a1 3\u000a1 5\u000aoutput\u000a1742\u000a49\u000a1842\u000a1814\u000a1822\u000a43\u000a44\u000a107\u000aNote\u000aAfter a query 3 2 4 42 the sequence is 40,\u20091742,\u200949,\u20091714,\u20094,\u20091722.\u000aAfter a query 3 2 6 50 the sequence is 40,\u20091842,\u2009149,\u20091814,\u2009104,\u20091822.\u000aAfter a query 2 3 4 41 the sequence is 40,\u20091842,\u200941,\u200941,\u2009104,\u20091822.\u000aAfter a query 3 1 5 1 the sequence is 43,\u20091845,\u200944,\u200944,\u2009107,\u20091822.
p3
sS'problemStatement'
p4
VE. Bear and Bad Powers of 42\u000atime limit per test5 seconds\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aLimak, a bear, isn't good at handling queries. So, he asks you to do it.\u000aWe say that powers of 42 (numbers 1,\u200942,\u20091764,\u2009...) are bad. Other numbers are good.\u000aYou are given a sequence of n good integers t1,\u2009t2,\u2009...,\u2009tn. Your task is to handle q queries of three types:\u000a1 i \u2014 print ti in a separate line.\u000a2 a b x \u2014 for set ti to x. It's guaranteed that x is a good number.\u000a3 a b x \u2014 for increase ti by x. After this repeat the process while at least one ti is bad.\u000aYou can note that after each query all ti are good.\u000aInput\u000aThe first line of the input contains two integers n and q (1\u2009\u2264\u2009n,\u2009q\u2009\u2264\u2009100\u2009000) \u2014 the size of Limak's sequence and the number of queries, respectively.\u000aThe second line of the input contains n integers t1,\u2009t2,\u2009...,\u2009tn (2\u2009\u2264\u2009ti\u2009\u2264\u2009109) \u2014 initial elements of Limak's sequence. All ti are good.\u000aThen, q lines follow. The i-th of them describes the i-th query. The first number in the line is an integer typei (1\u2009\u2264\u2009typei\u2009\u2264\u20093) \u2014 the type of the query. There is at least one query of the first type, so the output won't be empty.\u000aIn queries of the second and the third type there is 1\u2009\u2264\u2009a\u2009\u2264\u2009b\u2009\u2264\u2009n.\u000aIn queries of the second type an integer x (2\u2009\u2264\u2009x\u2009\u2264\u2009109) is guaranteed to be good.\u000aIn queries of the third type an integer x (1\u2009\u2264\u2009x\u2009\u2264\u2009109) may be bad.\u000aOutput\u000aFor each query of the first type, print the answer in a separate line.\u000aExample\u000ainput\u000a6 12\u000a40 1700 7 1672 4 1722\u000a3 2 4 42\u000a1 2\u000a1 3\u000a3 2 6 50\u000a1 2\u000a1 4\u000a1 6\u000a2 3 4 41\u000a3 1 5 1\u000a1 1\u000a1 3\u000a1 5\u000aoutput\u000a1742\u000a49\u000a1842\u000a1814\u000a1822\u000a43\u000a44\u000a107\u000aNote\u000aAfter a query 3 2 4 42 the sequence is 40,\u20091742,\u200949,\u20091714,\u20094,\u20091722.\u000aAfter a query 3 2 6 50 the sequence is 40,\u20091842,\u2009149,\u20091814,\u2009104,\u20091822.\u000aAfter a query 2 3 4 41 the sequence is 40,\u20091842,\u200941,\u200941,\u2009104,\u20091822.\u000aAfter a query 3 1 5 1 the sequence is 43,\u20091845,\u200944,\u200944,\u2009107,\u20091822.
p5
sS'name'
p6
VE. Bear and Bad Powers of 42
p7
sS'tags'
p8
Vdata structures 
p9
sS'url'
p10
Vhttp://codeforces.com/problemset/problem/679/E
p11
sS'memorylimit'
p12
V256 megabytes
p13
sS'timelimit'
p14
V5 seconds
p15
sS'output'
p16
(lp17
VOutput
p18
aVFor each query of the first type, print the answer in a separate line.
p19
asS'statement'
p20
(lp21
VE. Bear and Bad Powers of 42
p22
aVtime limit per test5 seconds
p23
aVmemory limit per test256 megabytes
p24
aVinputstandard input
p25
aVoutputstandard output
p26
aVLimak, a bear, isn't good at handling queries. So, he asks you to do it.
p27
aVWe say that powers of 42 (numbers 1,\u200942,\u20091764,\u2009...) are bad. Other numbers are good.
p28
aVYou are given a sequence of n good integers t1,\u2009t2,\u2009...,\u2009tn. Your task is to handle q queries of three types:
p29
aV1 i \u2014 print ti in a separate line.
p30
aV2 a b x \u2014 for set ti to x. It's guaranteed that x is a good number.
p31
aV3 a b x \u2014 for increase ti by x. After this repeat the process while at least one ti is bad.
p32
aVYou can note that after each query all ti are good.
p33
asS'problemId'
p34
V679/E
p35
sS'input'
p36
(lp37
VInput
p38
aVThe first line of the input contains two integers n and q (1\u2009\u2264\u2009n,\u2009q\u2009\u2264\u2009100\u2009000) \u2014 the size of Limak's sequence and the number of queries, respectively.
p39
aVThe second line of the input contains n integers t1,\u2009t2,\u2009...,\u2009tn (2\u2009\u2264\u2009ti\u2009\u2264\u2009109) \u2014 initial elements of Limak's sequence. All ti are good.
p40
aVThen, q lines follow. The i-th of them describes the i-th query. The first number in the line is an integer typei (1\u2009\u2264\u2009typei\u2009\u2264\u20093) \u2014 the type of the query. There is at least one query of the first type, so the output won't be empty.
p41
aVIn queries of the second and the third type there is 1\u2009\u2264\u2009a\u2009\u2264\u2009b\u2009\u2264\u2009n.
p42
aVIn queries of the second type an integer x (2\u2009\u2264\u2009x\u2009\u2264\u2009109) is guaranteed to be good.
p43
aVIn queries of the third type an integer x (1\u2009\u2264\u2009x\u2009\u2264\u2009109) may be bad.
p44
asS'id'
p45
c__builtin__
id
p46
sS'constraints'
p47
g37
sb.