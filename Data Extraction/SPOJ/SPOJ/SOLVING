(ispojProblem
SpojProblem
p0
(dp1
S'languages'
p2
VAll except: NODEJS PERL 6 VB.net
p3
sS'output'
p4
(lp5
VOutput For each test case output one line - the found sequence of moves. Write 'D' to move the hole down, 'U' to move it up, 'R' to move it right and 'L' to move it left. You shouldn't use more than 10000 moves. All moves should be valid (so for example don't try to move the hole up when it is in the first row). Scoring Your program will receive n^3/(m+1) points for each test case where m is the number of moves. 
p6
asS'description'
p7
V The 15 puzzle is a classic puzzle made famous in the 19th century. It consists of 4x4 board with 15 sliding tiles numbered from 1 to 15. The objective is to get them into this pattern: 1 2 3 4\u000a5 6 7 8\u000a9 10 11 12\u000a13 14 15 1 2 3 4\u000a5 6 7 8\u000a9 10 11 12\u000a13 14 15 1 2 3 4\u000a5 6 7 8\u000a9 10 11 12\u000a13 14 15 1 2 3 4 1 2 3 4 5 6 7 8 5 6 7 8 9 10 11 12 9 10 11 12 13 14 15 13 14 15   Here we will deal with a generalized version of the above puzzle. You should write a program that given some initial state of the nxn board finds a sequence of moves that transforms it so that in the i-th row there are tiles with numbers i*n+1,i*n+2,...,i*n+n (from left to right) - with the exception of the lower right corner where the hole should be. The less moves you use, the more points you get.  Input The first line of input contains the number of test cases c (c<=200). Then c test cases follow, each of them begins with a line with a single integer n (3<=n<=10) in it. The next n lines describe the initial state of the board - the i-th line consists of exactly n integers describing the i-th row. The position of the hole is indicated by 0. Output For each test case output one line - the found sequence of moves. Write 'D' to move the hole down, 'U' to move it up, 'R' to move it right and 'L' to move it left. You shouldn't use more than 10000 moves. All moves should be valid (so for example don't try to move the hole up when it is in the first row). Scoring Your program will receive n^3/(m+1) points for each test case where m is the number of moves. Example Input:\u000a2\u000a\u000a4\u000a1   2  7  3\u000a5   6  0  4\u000a9  10 11  8\u000a13 14 15  12\u000a\u000a3\u000a0 1 2\u000a4 5 3\u000a7 8 6\u000a\u000aOutput:\u000aURDDD\u000aRRDD
p8
sS'tags'
p9
S''
p10
sS'url'
p11
Vhttp://www.spoj.com/problems/SOLVING
p12
sS'addedBy'
p13
Vgawry
p14
sS'memorylimit'
p15
V1536MB
p16
sS'cluster'
p17
VCube (Intel G860)
p18
sS'timelimit'
p19
V0.629s
p20
sS'statement'
p21
(lp22
V The 15 puzzle is a classic puzzle made famous in the 19th century. It consists of 4x4 board with 15 sliding tiles numbered from 1 to 15. The objective is to get them into this pattern: 1 2 3 4
p23
aV5 6 7 8
p24
aV9 10 11 12
p25
aV13 14 15 1 2 3 4
p26
aV5 6 7 8
p27
aV9 10 11 12
p28
aV13 14 15 1 2 3 4
p29
aV5 6 7 8
p30
aV9 10 11 12
p31
aV13 14 15 1 2 3 4 1 2 3 4 5 6 7 8 5 6 7 8 9 10 11 12 9 10 11 12 13 14 15 13 14 15   Here we will deal with a generalized version of the above puzzle. You should write a program that given some initial state of the nxn board finds a sequence of moves that transforms it so that in the i-th row there are tiles with numbers i*n+1,i*n+2,...,i*n+n (from left to right) - with the exception of the lower right corner where the hole should be. The less moves you use, the more points you get.  
p32
asS'sourcelimit'
p33
V10000B
p34
sS'date'
p35
V2004-07-27
p36
sS'input'
p37
(lp38
VInput The first line of input contains the number of test cases c (c<=200). Then c test cases follow, each of them begins with a line with a single integer n (3<=n<=10) in it. The next n lines describe the initial state of the board - the i-th line consists of exactly n integers describing the i-th row. The position of the hole is indicated by 0. 
p39
asS'constraints'
p40
g38
sS'id'
p41
c__builtin__
id
p42
sS'name'
p43
VSOLVING
p44
sb.